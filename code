my_table = matches_table.drop_columns("type")

BTC = my_table.where("product_id == 'BTC-USD'")\
               .format_row_where("size>0.25","DEEP_RED")
ETH = my_table.where("product_id == 'ETH-USD'")

large_BTC = my_table.where(["product_id == 'BTC-USD'","size>0.25"])
large_ETH = my_table.where(["product_id == 'ETH-USD'","size>5"])

from deephaven.plot.figure import Figure

figure = Figure()
BTC_fig = figure.plot_xy(series_name="BTC_USD", t=BTC.reverse().tail(500), x="time", y="price").show()
ETH_fig = figure.plot_xy(series_name="ETH_USD", t=ETH.reverse().tail(500), x="time", y="price").show()

nanos_minute = 60_000_000_000
BTC_minute = BTC.select(["time","price"])\
                 .update("time = lowerBin(time, nanos_minute)")\
                 .avg_by("time")\
                 .rename_columns("BTC_price = price")
ETH_minute = ETH.select(["time","price"])\
                 .update("time = lowerBin(time, nanos_minute)")\
                 .avg_by("time")\
                 .rename_columns("ETH_price = price")
combo = BTC_minute.join(table=ETH_minute, on="time")
combo = combo.update(["ETH_BTC = ETH_price/BTC_price", "BTE_ETH = BTC_price/ETH_price"])

from deephaven.plot.figure import Figure

compare_price_fig = (
    Figure()
    .plot_cat(
        series_name="BTC_price",
        t=combo.reverse().tail(500),
        category="time",
        y="BTC_price"
    )
    .plot_cat(
        series_name="ETH_price",
        t=combo.reverse().tail(500),
        category="time",
        y="ETH_price"
    )
    .show()
)

from deephaven.plot.figure import Figure

ratio_scatter = (
    Figure()
    .plot_xy(
        series_name="ETH_BTC vs BTC_ETH",
        t=combo.reverse().tail(500),
        x="ETH_BTC",
        y="BTE_ETH"
    )
    .show()
)
